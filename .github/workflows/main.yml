# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # used by adonis
  PG_HOST: localhost
  PG_PORT: 5432
  PG_USER: lucid
  PG_PASSWORD: secret
  PG_DB_NAME: lucid
  MATT_PASSWORD: ${{secrets.ADMIN_PASSWORD}}
  PORT: 3333
  HOST: 0.0.0.0
  NODE_ENV: development
  APP_KEY: _9E_D2KJtq5sEn64BvznsPLAMKi2f6jZ
  DB_CONNECTION: pg
  # used by postgres container


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.1
        with: 
          node-version: "14.x"
          
      - name: Install dependencies
        run: npm install
      - name: Install missing peer dependency
        run: npm install --save reflect-metadata
        
      - name: Build application
        run: npm run build
      
      - name: Run migration
        run: node build/ace migration:run
        
      - name: Run seeder
        run: node build/ace db:seed
        
      - name: Run test
        run: npm test

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST: localhost
          POSTGRES_USER: lucid
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: lucid
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
